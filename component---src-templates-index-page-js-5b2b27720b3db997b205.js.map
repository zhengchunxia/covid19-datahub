{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/ArticleList.js"],"names":["IndexPageCore","data","config","errors","pageIndexYml","highlightAreas","map","area","apiCode","apiData","allCovid19Country","edges","find","edge","node","CountryCode","key","link","to","name","TotalConfirmed","NewConfirmed","href","articleEdges","articles","updates","Page","makePage","srcPath","pageQuery","ArticleList","art","frontmatter","id","fields","pathname","title"],"mappings":"wRAKaA,EAAgB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KACxBC,GAD2C,EAAbC,OACrBF,EAAKG,cAOpB,OACE,6BACE,6BACE,sCACA,6BACGF,EAAOG,eAAeC,KAAI,SAAAC,GACzB,IAZUC,EAAY,IAYhBC,GAZID,EAYiBD,EAAKC,QAXxC,UAAOP,EAAKS,kBAAkBC,MAAMC,MAAK,SAAAC,GACvC,OAAOA,EAAKC,KAAKb,KAAKc,cAAgBP,YADxC,iBAAO,EAEHM,YAFJ,aAAO,EAEGb,MAUF,OACE,yBAAKe,IAAKT,EAAKU,MACb,kBAAC,IAAD,CAAMC,GAAIX,EAAKU,MACZV,EAAKY,MAER,oCAAUV,aAAV,EAAUA,EAASW,gBACnB,oCAAUX,aAAV,EAAUA,EAASY,mBAK3B,kBAAC,IAAD,CAAMH,GAAG,cAAT,SAEF,6BACE,uBAAGI,KAAK,uFAAR,WAEF,6BACE,mCACA,kBAAC,IAAD,CAAMJ,GAAG,YAAT,QACA,kBAAC,IAAD,CAAaK,aAActB,EAAKuB,SAASb,SAE3C,6BACE,oCACA,kBAAC,IAAD,CAAMO,GAAG,WAAT,QACA,kBAAC,IAAD,CAAaK,aAActB,EAAKwB,QAAQd,WAM1Ce,EAAOC,YAAS3B,EAAe,CACnC4B,QAAS,iCAEIF,YAER,IAAMG,EAAS,c,oCCvDtB,qCAkBeC,IAfK,SAAC,GAAsB,IAApBP,EAAmB,EAAnBA,aACrB,OACE,6BACGA,GAAgBA,EAAajB,KAAI,SAAAO,GAAS,IAAD,QAClCkB,EAAMlB,SAAH,UAAGA,EAAMC,YAAT,aAAG,EAAYkB,YACxB,OACE,kBAAC,IAAD,CAAMhB,IAAKH,SAAF,UAAEA,EAAMC,YAAR,aAAE,EAAYmB,GAAIf,GAAIL,SAAF,UAAEA,EAAMC,YAAR,iBAAE,EAAYoB,cAAd,aAAE,EAAoBC,UACjD,4BAAKJ,aAAL,EAAKA,EAAKK","file":"component---src-templates-index-page-js-5b2b27720b3db997b205.js","sourcesContent":["import React from \"react\";\nimport { makePage } from \"../components/Layout\";\nimport { graphql, Link } from \"gatsby\";\nimport ArticleList from \"../components/ArticleList\";\n\nexport const IndexPageCore = ({ data, errors }) => {\n  const config = data.pageIndexYml;\n  const getApiData = (apiCode) => {\n    return data.allCovid19Country.edges.find(edge => {\n      return edge.node.data.CountryCode === apiCode;\n    })?.node?.data;\n  }\n\n  return (\n    <div>\n      <div>\n        <h1>全球院校动态</h1>\n        <div>\n          {config.highlightAreas.map(area => {\n            const apiData = getApiData(area.apiCode);\n            return (\n              <div key={area.link}>\n                <Link to={area.link} >\n                  {area.name}\n                </Link>\n                <div>累计: {apiData?.TotalConfirmed}</div>\n                <div>最新: {apiData?.NewConfirmed}</div>\n              </div>\n            );\n          })}\n        </div>\n        <Link to='/institute'>全部院校</Link>\n      </div>\n      <div>\n        <a href=\"https://github.com/applysquare/covid19-datahub#%E6%88%91%E8%A6%81%E6%B1%82%E5%8A%A9\">问题解答征集</a>\n      </div>\n      <div>\n        <h1>资料区</h1>\n        <Link to='/article'>更多资料</Link>\n        <ArticleList articleEdges={data.articles.edges} />\n      </div>\n      <div>\n        <h1>全球资讯</h1>\n        <Link to='/update'>更多资讯</Link>\n        <ArticleList articleEdges={data.updates.edges} />\n      </div>\n    </div>\n  );\n};\n\nconst Page = makePage(IndexPageCore, {\n  srcPath: '/src/templates/index-page.js',\n});\nexport default Page;\n\nexport const pageQuery = graphql`\n  query IndedxPage($apiCodes: [String]) {\n    pageIndexYml {\n      highlightAreas {\n        name\n        link\n        apiCode\n      }\n    }\n    allCovid19Country(filter: {data: {CountryCode: {in: $apiCodes}}}) {\n      edges {\n        node {\n          data {\n            Country\n            CountryCode\n            Slug\n            NewConfirmed\n            TotalConfirmed\n          }\n        }\n      }\n    }\n    updates: allMarkdownRemark(\n      limit: 5,\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fields: { templateKey: { eq: \"update-page\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 400)\n          id\n          fields {\n            pathname\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n    articles: allMarkdownRemark(\n      limit: 5,\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fields: { templateKey: { eq: \"article-page\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 400)\n          id\n          fields {\n            pathname\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nconst ArticleList = ({ articleEdges }) => {\n  return (\n    <div>\n      {articleEdges && articleEdges.map(edge => {\n        const art = edge?.node?.frontmatter;\n        return (\n          <Link key={edge?.node?.id} to={edge?.node?.fields?.pathname}>\n            <h2>{art?.title}</h2>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ArticleList;\n"],"sourceRoot":""}